{
	/* Wether to sort torrents or not - All other settings are ignored if disabled
	Sorting is useful when many torrents are active at the same stage. For example when many torrents are downloading or in a checking state.
	If prioritising active downloads, ensure torrent queuing is enabled in qbittorrent, otherwise these settings will have no effect.
	*/
	"SORT": true,

	/* Check position right after move and keep moving until in correct position
	Moves will be a lot slower, but ensures higher priority torrents are in the correct position sooner.
	*/
	"PERSISTENT_MOVES": false,

	/* Time to wait before sorting each individual torrent
	Setting too fast may cause race conditions in qBittorrent or even make it unresponsive or crash.
	
	If "do not count slow torrents" is enabled in qBittorrent, ensure the move delay is faster than the time it takes to process slow torrents.
	For example, if you are processing 10 torrents at a time, and you've configured to ignore slow torrents after 60 seconds of inactivity, ensure the move delay is less than 6000ms (60 seconds / 10 torrents).
	Failing to do so will result in qBittorrent downloading torrents in the wrong order.
	
	Set to 0 to disable delay - Will consume more CPU and may cause issues in qBittorrent.
	*/
	"MOVE_DELAY": 50,

	/* Maximum number of torrents to move each cycle
	Once this threshold is reached, the sorter will wait for the move delay before running again.
	When managing a large number of torrents, this is particularly useful as it focuses on sorting the first X torrents, then moves onto the next X torrents in the next cycle.
	The lower this number is, the more you want accurate ordering for earlier torrents.
	For example, if you have 1000 torrents, and you set this to 10, it will sort the first 10 torrents, then re-check positioning, then sort the next 10 torrents that need to be moved.

	Lower this number to increase the "refresh rate" of the sorter, lower numbers result in top torrents being moved up first.

	Set to 0 to disable stepping.
	*/
	"RESORT_STEP": 250,

	/* Minimum API calls to make before stopping when using RESORT_STEP
	This ensures that if you have too many redundant moves at the start of your queue, it will still send a minimum number of API calls before stopping.
	*/
	"RESORT_STEP_MINIMUM_CALLS": 5,

	/* Maximum number of API calls to make when sorting torrents each cycle
	Works exactly like RESORT_STEP, but ignores redundant moves in the count.
	RESORT_STEP and RESORT_STEP_API can work both together or independently.

	Set to 0 to disable stepping.
	*/
	"RESORT_STEP_CALLS": 100,

	/* Move stopped to the bottom of the queue
	1: Move to bottom
	0: Leave as-is
	-1: Move to top
	*/
	"MOVE_STOPPED": 1,

	/*
	Sorts are applied in reverse order, with last being highest priority
	For example, if you want to prefer private torrents over finishing ones, put PRIVATE after REMAINING
	This will order all private torrents first, then sort by remaining size within that group

	Examples:
	Prioritize season premieres and private trackers:
	[
		{"key": "SIZE", "direction": "ASC"},
		{"key": "NAME_CONTAINS", "direction": "DESC", "searchString": "S01"},
		{"key": "PRIVATE", "direction": "DESC"}
	]
	Finish downloads that are closest to completion:
	[
		{"key": "REMAINING", "direction": "ASC"},
		{"key": "PROGRESS", "direction": "DESC"}
	]
	Prioritize specific private trackers (Use [qBit Manage](https://github.com/StuffAnThings/qbit_manage) to tag trackers):
	[
		{"key": "PRIVATE", "direction": "DESC"},
		{"key": "TAGS", "direction": "ASC", "tags": ["@MaM", "@TL"]},
		{"key": "TAGS", "direction": "ASC", "tags": ["@PTP", "@BTN"]}
	]
	*/
	"METHODS": [
		/* Prefer smaller torrents
		ASC: Smallest first
		DESC: Largest first
		*/
		{
			"key": "SIZE",
			"direction": "ASC"
		},
		/* Prefer torrents with the most progress
		ASC: Least progress first
		DESC: Most progress first
		*/
		{
			"key": "PROGRESS",
			"direction": "DESC"
		},
		/* Prefer torrents with the most completed data
		ASC: Least completed first
		DESC: Most completed first
		*/
		{
			"key": "COMPLETED",
			"direction": "DESC"
		},
		/* Prefer torrents closest to completion
		ASC: Closest to finishing first
		DESC: Furthest from finishing first - This is useful if you want to prioritise starting new torrents over finishing existing ones
		*/
		{
			"key": "REMAINING",
			"direction": "ASC"
		},
		/* Prefer finishing private torrents
		ASC: Non-private first
		DESC: Private first
		*/
		{
			"key": "PRIVATE",
			"direction": "DESC"
		},
		/* Prefer torrents with specific tags
		ASC: With tags first
		DESC: Without tags first
		When specifying multiple tags, the order of tags does not matter. If you want to prioritise specific tags over others, use multiple sort entries.
		*/
		// {
		// 	"key": "TAGS",
		// 	"direction": "ASC",
		// 	"tags": ["@DP"]
		// },
		// {
		// 	"key": "TAGS",
		// 	"direction": "ASC",
		// 	"tags": ["@MaM"]
		// },
		/* Prefer finishing torrents whose name contains a specific string
		ASC: Contains last
		DESC: Contains first
		*/
		{
			"key": "NAME_CONTAINS",
			"direction": "DESC",
			"searchString": "S01"
		},
		/* Prefer torrents in specific categories
		ASC: Without categories first
		DESC: With categories first
		When specifying multiple categories, the order of categories does not matter. If you want to prioritise specific categories over others, use multiple sort entries.
		*/
		{
			"key": "CATEGORIES",
			"direction": "DESC",
			"categories": ["cross-seed-links"]
		},
		/* Prefer torrents that are almost finished
		ASC: Almost finished last
		DESC: Almost finished first
		Threshold is a float between 0 and 1, representing the progress percentage.
		*/
		{
			"key": "PROGRESS_THRESHOLD",
			"direction": "DESC",
			"threshold": 0.1
		},
		{
			"key": "PROGRESS_THRESHOLD",
			"direction": "DESC",
			"threshold": 0.2
		},
		{
			"key": "PROGRESS_THRESHOLD",
			"direction": "DESC",
			"threshold": 0.5
		},
		{
			"key": "PROGRESS_THRESHOLD",
			"direction": "DESC",
			"threshold": 0.75
		},
		{
			"key": "PROGRESS_THRESHOLD",
			"direction": "DESC",
			"threshold": 0.9
		},
		{
			"key": "PROGRESS_THRESHOLD",
			"direction": "DESC",
			"threshold": 0.99
		},
		/* Prefer manually prioritised torrents
		ASC: Priority 1 first
		DESC: Priority 1 last
		Untagged torrents are considered priority 50
		*/
		{
			"key": "PRIORITY_TAG",
			"direction": "ASC",
			"prefix": "Priority - " // Tag torrents with "Priority - 1", "Priority - 2", ..., "Priority - 100" to set their priority
		},
		/* Prefer torrents without metadata
		ASC: Torrents without metadata first
		DESC: Torrents with metadata first
		By default, torrents without metadata are de-prioritised as they can't accurately be sorted by size or progress.
		It is recommended to leave this as-is, and let Metadatarr source torrents instead of qBittorrent.
		*/
		{
			"key": "NO_METADATA",
			"direction": "DESC"
		}
	],
	/*
	Custom sort rules for torrents in a checking state
	Checking torrents are only sorted amongst themselves
	Rules are applied in conjunction with the main METHODS rules. METHODS are treated as tie breakers.
	*/
	"CHECKING_METHODS": [
		{
			"key": "REMAINING",
			"direction": "ASC"
		},
		{
			"key": "PRIORITY_TAG",
			"direction": "ASC",
			"prefix": "Priority - " // Tag torrents with "Priority - 1", "Priority - 2", ..., "Priority - 100" to set their priority
		}
	],
	/*
	Custom sort rules for torrents that are being moved
	Moving torrents are only sorted amongst themselves
	Rules are applied in conjunction with the main METHODS rules. METHODS are treated as tie breakers.
	*/
	"MOVING_METHODS": [
		{
			"key": "REMAINING",
			"direction": "ASC"
		},
		// We prefer completing existing moves to lower disk fragmentation
		{
			"key": "PROGRESS",
			"direction": "DESC"
		},
		{
			"key": "PRIORITY_TAG",
			"direction": "ASC",
			"prefix": "Priority - " // Tag torrents with "Priority - 1", "Priority - 2", ..., "Priority - 100" to set their priority
		}
	]
}
